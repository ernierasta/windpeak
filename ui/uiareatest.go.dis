
func somefunc() {
	lAuthor := ui.NewAttributedString(m.Author)
	lAuthor.SetAttribute(ui.TextSize(20), 0, len(m.Author))
	a := ui.NewArea(areaHandler{text: lAuthor})
	hbox.Append(a, false)

}

type areaHandler struct {
	text *ui.AttributedString
}

func (ah areaHandler) Draw(a *ui.Area, p *ui.AreaDrawParams) {
	tl := ui.DrawNewTextLayout(&ui.DrawTextLayoutParams{
		String:      ah.text,
		DefaultFont: &ui.FontDescriptor{},
		//DefaultFont: fontButton.Font(),
		Width: p.AreaWidth,
		Align: ui.DrawTextAlign(ui.Left),
	})
	defer tl.Free()
	p.Context.Text(tl, 0, 0)
}

func (areaHandler) MouseEvent(a *ui.Area, me *ui.AreaMouseEvent) {
	//fmt.Printf("%+v\n", me)
}

func (areaHandler) MouseCrossed(a *ui.Area, left bool) {
	// do nothing
}

func (areaHandler) DragBroken(a *ui.Area) {
	// do nothing
}

func (areaHandler) KeyEvent(a *ui.Area, ke *ui.AreaKeyEvent) (handled bool) {
	// reject all keys
	return false
}
